import { EventEmitter } from 'events';
import { HueApi, ILight, lightState } from 'node-hue-api';
import { Light } from './Light';
import { LightState } from './LightState';
import { LightStateBuilder } from './LightStateBuilder';
import { LightStateChange } from './LightStateChange';

/**
 * An individual lighting device (e.g., a bulb).
 *
 * @class Light
 */
export class HueLight extends EventEmitter implements Light {
  public readonly id: string;
  public readonly name: string;
  private readonly originalApiLightObject: ILight;
  private readonly api: HueApi;
  private timestamp: Date; // TODO: Why did we want this again?

  /**
   * Creates an instance of Light.
   * @param {Object} apiLightObject The object from node-hue-api.
   * @param {Object} hueApi A node-hue-api object that can be used to control this light.
   */
  constructor(apiLightObject: ILight, hueApi: HueApi) {
    if (!apiLightObject.id) {
      throw new Error('Light object from API missing ID');
    }

    super();

    this.id = apiLightObject.id;
    this.name = apiLightObject.name;
    this.originalApiLightObject = apiLightObject;
    this.timestamp = new Date();
    this.api = hueApi;
  }

  /**
   * Turns the light on.
   *
   * @param {number} [transitionSeconds] The length of time in seconds that the transition to the new state should last.
   */
  public async turnOn(transitionSeconds?: number) {
    await this.setState(
      LightStateBuilder.getOnState(undefined, transitionSeconds)
    );
  }

  /**
   * Turns the light off.
   *
   * @param {number} transitionSeconds The length of time in seconds that the transition to the new state should last.
   */
  public async turnOff(transitionSeconds?: number) {
    await this.setState(LightStateBuilder.getOffState(transitionSeconds));
  }

  public async setBrightness(value: number, transitionSeconds?: number) {
    await this.setState(LightStateBuilder.getOnState(value, transitionSeconds));
  }

  /**
   * Sets the state of the light.
   *
   * @param {LightState} state A light state object generated by node-hue-api.
   */
  public async setState(state: LightState | lightState.State) {
    this.emit(LightStateChange.Start, state);

    try {
      await this.api.setLightState(this.id, state);

      this.emit(LightStateChange.Success, state);
    } catch (error) {
      this.emit(LightStateChange.Error, error);
    }
  }

  /**
   * Gets the state of the light.
   *
   * @returns {Promise<LightState>} A light state object from node-hue-api.
   */
  public async getState() {
    const light = await this.api.getLightStatus(this.id);
    return light.state;
  }
}
